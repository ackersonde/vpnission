name: Deploy Transmission under IPSec

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Build application and docker image
        run: |
          docker run --rm --privileged multiarch/qemu-user-static:register
          docker build --platform linux/arm64 --compress -t danackerson/vpnission:vg$GITHUB_RUN_ID .

          docker login -u ${{ secrets.CTX_DOCKER_USER }} -p ${{ secrets.CTX_DOCKER_PASS }}
          docker tag danackerson/vpnission:vg$GITHUB_RUN_ID danackerson/vpnission:latest
          docker push danackerson/vpnission:vg$GITHUB_RUN_ID
          docker push danackerson/vpnission:latest

      - name: Prepare K8S bundle config
        run: |
          export GITHUB_RUN_ID_B64=`echo -n $GITHUB_RUN_ID | base64`
          sed -i -e "s@{{GITHUB_RUN_ID_B64}}@$GITHUB_RUN_ID_B64@" vpnission.yml
          sed -i -e "s@{{GITHUB_RUN_ID}}@$GITHUB_RUN_ID@" vpnission.yml

          sed -i -e "s@{{CTX_SERVER_DEPLOY_SECRET_B64}}@${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}@" vpnission.yml
          sed -i -e "s@{{CTX_SERVER_DEPLOY_CACERT_B64}}@${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}@" vpnission.yml

          echo -n "${{ secrets.CTX_PLEX_TOKEN }}" | base64 | tr -d \\n > .base64_enc
          export CTX_PLEX_TOKEN_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_PLEX_TOKEN_B64}}@$CTX_PLEX_TOKEN_B64@" vpnission.yml

          echo -n "${{ secrets.CTX_VPN_EAP_ID }}" | base64 | tr -d \\n > .base64_enc
          export CTX_VPN_EAP_ID_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_VPN_EAP_ID_B64}}@$CTX_VPN_EAP_ID_B64@" vpnission.yml

          echo -n "${{ secrets.CTX_VPN_SECRET }}" | base64 | tr -d \\n > .base64_enc
          export CTX_VPN_SECRET_B64=`cat .base64_enc`
          sed -i -e "s@{{CTX_VPN_SECRET_B64}}@$CTX_VPN_SECRET_B64@" vpnission.yml

          # TODO: need to create local secret once repo created
          echo -n "${{ secrets.TRANSMISSION_HOST_NAME }}" | base64 | tr -d \\n > .base64_enc
          export TRANSMISSION_HOST_NAME_B64=`cat .base64_enc`
          sed -i -e "s@{{TRANSMISSION_HOST_NAME_B64}}@$TRANSMISSION_HOST_NAME_B64@" vpnission.yml

      - name: Create wireguard tunnel configuration
        run: |
          sudo apt-get install wireguard resolvconf
          echo "${{ secrets.CTX_WIREGUARD_GITHUB_ACTIONS_CLIENT_CONFIG }}" | sudo tee /etc/wireguard/tunnel.conf

      - name: Prepare ssh key for remote login
        run: |
          mkdir ~/.ssh/
          echo "${{ secrets.CTX_SERVER_DEPLOY_SECRET_B64 }}" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.CTX_SERVER_DEPLOY_CACERT_B64 }}" | base64 -d > ~/.ssh/id_ed25519-cert.pub

      - name: Deploy to K8S
        env:
          SSH_CXN: ${{ secrets.CTX_K8S_SSH_USER }}@${{ secrets.CTX_K8S_SSH_HOST }}
        run: |
          ssh-keygen -L -f ~/.ssh/id_ed25519-cert.pub
          wg-quick up tunnel

          scp -o StrictHostKeyChecking=no vpnission.yml $SSH_CXN:~/k3s/
          ssh $SSH_CXN << EOF
            sudo kubectl create configmap protonvpn --from-literal=server=nl-15 || \
              sudo kubectl create configmap protonvpn --from-literal=server=nl-15 \
              -o yaml --dry-run=client | sudo kubectl replace -f -

            sudo kubectl apply -f k3s/vpnission.yml
          EOF

          wg-quick down tunnel

          rm -Rf ~/.ssh

          curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
