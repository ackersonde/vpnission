name: Deploy Transmission under IPSec

on:
  push:
    branches: [ main, wireguard ]
  workflow_dispatch:
    inputs:
      protonvpn_server:
        description: 'Which wireguard config to use'
        required: false
        default: 'NL_1'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PROTONVPN_SERVER:  ${{ github.event.inputs.protonvpn_server }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.18'
      - name: Build application and docker image
        run: |
          docker run --rm --privileged multiarch/qemu-user-static:register
          docker build --compress -t danackerson/vpnission:vg$GITHUB_RUN_ID .

          export DUSER=$(echo ${{ secrets.ORG_DOCKER_USER }} | base64 -d)
          export DPASS=$(echo ${{ secrets.ORG_DOCKER_PASS }} | base64 -d)
          docker login -u $DUSER -p $DPASS

          docker tag danackerson/vpnission:vg$GITHUB_RUN_ID danackerson/vpnission:latest
          docker push danackerson/vpnission:vg$GITHUB_RUN_ID
          docker push danackerson/vpnission:latest

          export TRANSMISSION_HOST_NAME=$(echo ${{ secrets.ORG_TRANSMISSION_HOST_NAME }} | base64 -d)
          export ORG_DIGITALOCEAN_DNS_TOKEN=$(echo ${{ secrets.ORG_DIGITALOCEAN_DNS_TOKEN }} | base64 -d)
          export CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN=$(echo ${{ secrets.ORG_DIGITALOCEAN_DROPLET_PROXY_TOKEN }} | base64 -d)
          export CTX_DIGITALOCEAN_FIREWALL=$(echo ${{ secrets.ORG_DIGITALOCEAN_FIREWALL }} | base64 -d)
          git clone https://github.com/ackersonde/digitaloceans.git
          cd digitaloceans
          go mod tidy
          go build do.go
          cd ../

          if [[ -z $PROTONVPN_SERVER ]]; then
            PROTONVPN_SERVER="NL_88"
          fi
          envsubst '${GITHUB_RUN_ID} ${TRANSMISSION_HOST_NAME} ${PROTONVPN_SERVER} ${ORG_DIGITALOCEAN_DNS_TOKEN}' < docker-compose.yml > docker-compose-deploy.yml

          export SSH_CXN=$(echo ${{ secrets.ORG_IPV6_SLAVE_HOME }} | base64 -d)

          cat <<DEPLOY_EOF >deploy-vpnission.sh
          #!/usr/bin/bash
          ssh -o StrictHostKeyChecking=no ubuntu@$SSH_CXN mkdir -p vpnission traefik/logs
          scp docker-compose-deploy.yml ubuntu@[$SSH_CXN]:~/vpnission
          ssh ubuntu@$SSH_CXN '\
            curl -o traefik/dynamic_conf.yml https://raw.githubusercontent.com/ackersonde/digitaloceans/main/scripts/dynamic_conf.yml
            docker compose -f ./vpnission/docker-compose-deploy.yml down && \
            docker compose -f ./vpnission/docker-compose-deploy.yml pull && \
            docker compose -f ./vpnission/docker-compose-deploy.yml up -d
          '
          DEPLOY_EOF
          chmod u+x deploy-vpnission.sh

          mkdir ~/.ssh
          echo "${{ secrets.ORG_DIGITALOCEAN_SSH_PRIVKEY }}" | tee ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          ./digitaloceans/do -fn=firewallSSH -allow=true -ip=$public_ip_address -tag=traefik

          scp -o StrictHostKeyChecking=no deploy-vpnission.sh docker-compose-deploy.yml root@ackerson.de:~/
          ssh root@ackerson.de ./deploy-vpnission.sh
          ssh root@ackerson.de rm deploy-vpnission.sh docker-compose-deploy.yml

          rm -Rf .ssh/ .docker/ deploy-vpnission.sh
          ./digitaloceans/do -fn=firewallSSH -allow=false -ip=$public_ip_address

          export SLACK_NOTIFY_TOKEN=$(echo ${{ secrets.ORG_SLACK_NOTIFICATIONS_TOKEN }} | base64 -d)
          curl -s -o /dev/null -X POST -d token=$SLACK_NOTIFY_TOKEN -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|$GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
