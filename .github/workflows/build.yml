name: Deploy Transmission under IPSec

on:
  push:
    branches: [ main, wireguard ]
  workflow_dispatch:
    inputs:
      protonvpn_server:
        description: 'Which VPN config to use'
        required: false
        default: '138.199.7.129'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CTX_DIGITALOCEAN_DNS_TOKEN: ${{ secrets.CTX_DIGITALOCEAN_DNS_TOKEN }}
      CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN: ${{ secrets.CTX_DIGITALOCEAN_DROPLET_PROXY_TOKEN }}
      CTX_DIGITALOCEAN_FIREWALL: ${{ secrets.CTX_DIGITALOCEAN_FIREWALL }}
      CTX_SSH_DEPLOY_FINGERPRINT: ${{ secrets.CTX_SSH_DEPLOY_FINGERPRINT }}
      SSH_CXN: ${{ secrets.CTX_IPV6_SLAVE_HOME }}
      CTX_VPN_EAP_ID: ${{ secrets.CTX_VPN_EAP_ID }}
      CTX_VPN_SECRET: ${{ secrets.CTX_VPN_SECRET }}
      TRANSMISSION_HOST_NAME: ${{ secrets.TRANSMISSION_HOST_NAME }}
      PROTONVPN_SERVER:  ${{ github.event.inputs.protonvpn_server }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Build application and docker image
        run: |
          docker run --rm --privileged multiarch/qemu-user-static:register
          docker build --compress -t danackerson/vpnission:vg$GITHUB_RUN_ID .

          docker login -u ${{ secrets.CTX_DOCKER_USER }} -p ${{ secrets.CTX_DOCKER_PASS }}
          docker tag danackerson/vpnission:vg$GITHUB_RUN_ID danackerson/vpnission:latest
          docker push danackerson/vpnission:vg$GITHUB_RUN_ID
          docker push danackerson/vpnission:latest

          git clone https://github.com/ackersonde/digitaloceans.git
          cd digitaloceans
          go get -t -d -v ./...
          go build do.go
          cd ../

          if [[ -z $PROTONVPN_SERVER ]]; then
            PROTONVPN_SERVER="138.199.7.129"
          fi
          envsubst '${GITHUB_RUN_ID} ${TRANSMISSION_HOST_NAME} ${PROTONVPN_SERVER} ${CTX_DIGITALOCEAN_DNS_TOKEN} ${CTX_VPN_EAP_ID} ${CTX_VPN_SECRET}' < docker-compose.yml > docker-compose-deploy.yml

          cat <<DEPLOY_EOF >deploy-vpnission.sh
          #!/usr/bin/bash
          ssh -o StrictHostKeyChecking=no ubuntu@$SSH_CXN mkdir -p vpnission traefik/logs
          scp docker-compose-deploy.yml ubuntu@$SSH_CXN:~/vpnission
          ssh ubuntu@$SSH_CXN '\
            curl -o traefik/dynamic_conf.yml https://raw.githubusercontent.com/ackersonde/digitaloceans/main/scripts/dynamic_conf.yml
            docker compose -f ./vpnission/docker-compose-deploy.yml down && \
            docker compose -f ./vpnission/docker-compose-deploy.yml pull && \
            docker compose -f ./vpnission/docker-compose-deploy.yml up -d
          '
          DEPLOY_EOF
          chmod u+x deploy-vpnission.sh

          mkdir ~/.ssh
          cat <<EOF >~/.ssh/id_rsa
          ${{ secrets.CTX_DIGITALOCEAN_SSH_PRIVKEY }}
          EOF
          chmod 400 ~/.ssh/id_rsa

          public_ip_address=$(curl -s https://checkip.amazonaws.com)
          ./digitaloceans/do -fn=firewallSSH -allow=true -ip=$public_ip_address -tag=traefik

          scp -o StrictHostKeyChecking=no deploy-vpnission.sh docker-compose-deploy.yml root@ackerson.de:~/
          ssh root@ackerson.de ./deploy-vpnission.sh
          ssh root@ackerson.de rm deploy-vpnission.sh docker-compose-deploy.yml

          rm -Rf .ssh/ deploy-vpnission.sh docker-compose-deploy.yml
          ./digitaloceans/do -fn=firewallSSH -allow=false -ip=$public_ip_address

          curl -s -o /dev/null -X POST -d token=${{ secrets.CTX_SLACK_NOTIFICATIONS_TOKEN }} -d channel=C092UE0H4 \
            -d text="<https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID | $GITHUB_REPOSITORY @ $GITHUB_RUN_ID>" \
            https://slack.com/api/chat.postMessage
